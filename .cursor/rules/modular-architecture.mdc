---
description: Enforce modular architecture, clean separation, and reusable logic for AI Telegram bot
globs: ["**/*.go"]
alwaysApply: true
---

# üß± Modular AI Telegram Bot Architecture Rules

This rule enforces best practices for building scalable, testable, and clean modular architecture in the SaveMessage Telegram bot project.

---

## ‚úÖ 1. Functional Isolation

Each core behavior must be a **dedicated function** with a single responsibility:

- `DeleteMessage(chatID, messageID)`
- `RequestTopicName(chatID, originalMessageID)`
- `CreateNewTopic(chatID, topicName)`
- `SuggestCategories(messageText) -> []string`
- `MoveMessageToTopic(originalMsgID, targetTopicID)`
- `SendEditPrompt(originalMsgID)`

These functions should be:
- Predictable
- Testable
- Reusable
- Free of side-effects outside their domain

---

## ‚úÖ 2. Handler Separation by User Flow

Each user journey must have its own **handler function**:

| User Action                              | Handler Function                   |
|------------------------------------------|------------------------------------|
| Select an existing folder                | `HandleExistingTopicSelection()`   |
| Create new folder from AI suggestion     | `HandleNewTopicCreationRequest()`  |
| Enter name for new folder                | `HandleNewTopicNameEntry()`        |
| Edit a saved message                     | `HandleEditRequest()`              |

This ensures logic remains traceable and modular.

---

## ‚úÖ 3. Command/Event Routing

Use a **central dispatcher** or router to route updates based on context:

```go
func HandleUpdate(update tgbotapi.Update) {
    switch {
    case isEditRequest(update):
        HandleEditRequest(update)
    case isTopicSelection(update):
        HandleExistingTopicSelection(update)
    case isNewTopicPrompt(update):
        HandleNewTopicNameEntry(update)
    case isMessageInGeneralTopic(update):
        StartAICategorization(update)
    default:
        SendUnknownActionNotice(update)
    }
}
```

This isolates behavior from parsing logic and avoids duplication.

---

## ‚úÖ 4. Architecture Goals

Maintain clean architectural principles:

- All logic should live in one of: `handlers/`, `services/`, `ai/`, or `utils/`
- `main.go` should only handle setup, wiring, and server start
- Keep message-handling logic out of `main.go`
- Centralize all routing and command parsing

---

## üß™ Additional Notes

- Always log handler **entry and exit**
- Prepare services to be **mocked** for testing
- Future-proof for features like:
  - Search
  - Tagging
  - Reactions
- Avoid hardcoded text ‚Äî use constants or i18n
- Respect user privacy:
  - Do not store message content or personal data
  - Only store minimal user metadata if needed (e.g., roles, pro status)

---

üèÅ Following these rules will ensure a modular, scalable, and robust bot architecture that‚Äôs AI-ready and privacy-first.
