---
description: Enforce Git Flow branching model for the GameHub project
globs: []
alwaysApply: true
---

# 🧩 Git Flow Branching Strategy (GameHub Project)

## 🔃 Branching Rules

- `main` branch is always **stable** and **production-ready**.
- `develop` branch is used for active feature integration and testing.

## 🌱 Feature Development

- Create feature branches from `develop`, using the naming format:
feature/<feature-name>
Examples:
- `feature/uno-game-ui`
- `feature/telegram-webapp-integration`

- When complete, merge feature branches **back into `develop`** using a **pull request**.

## 🚀 Release Workflow

- Create `release/*` branches from `develop` for staging and final QA.
- Merge `release/*` branches into both `main` and `develop` when ready.

## 🔥 Hotfixes

- For urgent production issues:
- Create `hotfix/*` branches from `main`
- Merge back into **both** `main` and `develop` after the fix

## 📝 Commit Messages

- Use **Conventional Commit** format:
- `feat: add uno game board`
- `fix: handle wild card logic bug`
- `chore: update game dependencies`

## 🛑 Direct Commit Rules

- ❌ Never commit directly to:
- `main`
- `develop`

(Only allow merges via pull requests or release/hotfix branches)